{"version":3,"file":"static/js/672.889ab9b2.chunk.js","mappings":"sLACA,GAAgB,QAAU,yBAAyB,SAAW,0BAA0B,OAAS,wBAAwB,YAAc,6BAA6B,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,0B,mBCajS,EAVmB,SAACA,GAElB,IAAIC,EAAO,WAAaD,EAAME,GAC9B,OACEC,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAEC,OAAS,IAAMD,EAAEE,OAAOC,UACxCL,EAAAA,EAAAA,KAACM,EAAAA,GAAO,CAACC,GAAIT,EAAKO,SAAER,EAAMW,QAGhC,ECFA,EAPgB,SAACX,GACf,OACEG,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAEO,QAAQJ,SAAER,EAAMY,SAEtC,E,oBCAMC,EAAiB,SAACb,GAEtB,OACEc,EAAAA,EAAAA,MAAA,QAAMC,SAAUf,EAAMgB,aAAaR,SAAA,EACjCL,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAEY,aAAaT,UAC7BL,EAAAA,EAAAA,KAACe,EAAAA,MAAK,CACJd,UAAWC,EAAEc,SACbC,YAAa,qBACbT,KAAK,iBACLU,UAAU,gBAEdlB,EAAAA,EAAAA,KAAA,OAAAK,UAAKL,EAAAA,EAAAA,KAAA,UAAQC,UAAWC,EAAEiB,OAAQC,KAAK,SAAQf,SAAC,aAGtD,EA2CA,EAzCgB,SAACR,GAEf,IAAIwB,EAAQxB,EAAMyB,YAEdC,EAAkBF,EAAMG,QAAQC,KAAI,SAAAC,GAAC,OAAI1B,EAAAA,EAAAA,KAAC2B,EAAU,CAACnB,KAAMkB,EAAElB,KAAiBT,GAAI2B,EAAE3B,IAAZ2B,EAAE3B,GAAe,IACzF6B,EAAmBP,EAAMQ,SAASJ,KAAI,SAAAK,GAAC,OAAI9B,EAAAA,EAAAA,KAAC+B,EAAO,CAACtB,QAASqB,EAAErB,SAAcqB,EAAE/B,GAAM,IAYzF,OAAIF,EAAMmC,QAGHrB,EAAAA,EAAAA,MAAA,OAAKV,UAAWC,EAAEsB,QAAQnB,SAAA,EACvBL,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAE+B,aAAa5B,SAC5BkB,KAEHZ,EAAAA,EAAAA,MAAA,OAAKV,UAAWC,EAAE2B,SAASxB,SAAA,EACzBL,EAAAA,EAAAA,KAAA,OAAAK,SAAMuB,KAEN5B,EAAAA,EAAAA,KAACkC,EAAAA,OAAM,CACLC,cAAe,CAAEC,eAAgB,IACjCxB,SAlBG,SAACyB,EAAQC,GAAqB,IAAjBC,EAASD,EAATC,UAC5BC,QAAQC,IAAIJ,GALM,SAACA,GACnBxC,EAAM6C,YAAYL,EAASD,eAC7B,CAIEO,CAAcN,GACdE,GACJ,EAegBK,KAAM,UAAUvC,SACf,SAACwC,GAAW,OAAK7C,EAAAA,EAAAA,KAACU,GAAcoC,EAAAA,EAAAA,GAAA,GAAKD,GAAe,WAd1C7C,EAAAA,EAAAA,KAAC+C,EAAAA,GAAQ,CAACxC,GAAI,UAoBzC,E,oBCtCA,GAAeyC,E,QAAAA,KACbC,EAAAA,EAAAA,UAfoB,SAAC5B,GACrB,MAAO,CACLC,YAAaD,EAAMC,YAEvB,IAEyB,SAAC4B,GACxB,MAAO,CACLR,YAAa,SAACN,GACZc,GAASC,EAAAA,EAAAA,GAAmBf,GAC9B,EAEJ,IAIEgB,EAAAA,EAFF,CAGEC,E","sources":["webpack://tutorial/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__YvIMk\",\"textarea\":\"Dialogs_textarea__SNwwk\",\"button\":\"Dialogs_button__w2KBV\",\"dialogItems\":\"Dialogs_dialogItems__oxBd+\",\"dialogsItems\":\"Dialogs_dialogsItems__4rzk7\",\"active\":\"Dialogs_active__3YmQ2\",\"messages\":\"Dialogs_messages__L5GUU\",\"message\":\"Dialogs_message__AC0Ko\"};","import React from \"react\";\r\nimport s from'./../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\"\r\n\r\nconst DialogItem = (props) =>{\r\n\r\n  let path = \"dialogs/\" + props.id;\r\n  return(\r\n    <div className={s.dialog + ' ' + s.active}>\r\n      <NavLink to={path}>{props.name}</NavLink>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport s from'./../Dialogs.module.css';\r\n\r\nconst Message = (props) =>{\r\n  return(\r\n    <div className={s.message}>{props.message}</div>\r\n  )\r\n}\r\n\r\n\r\nexport default Message;","import React from \"react\";\r\nimport s from'./Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { Field, Formik } from \"formik\";\r\n\r\nconst AddMessageForm = (props) =>{\r\n\r\n  return(\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div className={s.messageBlock}>\r\n        <Field \r\n          className={s.textarea}\r\n          placeholder={\"Enter your message\"} \r\n          name=\"newMessageBody\" \r\n          component=\"textarea\"/>\r\n      </div>\r\n      <div><button className={s.button} type=\"submit\">Send</button></div>\r\n    </form>\r\n  )\r\n}\r\n\r\nconst Dialogs = (props) => {\r\n\r\n  let state = props.dialogsPage;\r\n\r\n  let dialogsElements = state.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id}/>)\r\n  let messagesElements = state.messages.map(m => <Message message={m.message} key={m.id} />);\r\n\r\n  let addNewMessage = (formData) => {\r\n    props.sendMessage(formData.newMessageBody);\r\n  }\r\n\r\n  const onSubmit = (formData, { resetForm }) => {\r\n    console.log(formData);\r\n    addNewMessage(formData);\r\n    resetForm(); \r\n}\r\n\r\n  if(!props.isAuth) return <Navigate to={\"/login\"} />;\r\n\r\n  return (\r\n         <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n              {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n              <div>{messagesElements}</div>\r\n\r\n              <Formik \r\n                initialValues={{ newMessageBody: \"\" }} \r\n                onSubmit={onSubmit} \r\n                form={'dialogs'}>\r\n                {(formikProps) => <AddMessageForm {...formikProps} />}\r\n              </Formik>\r\n            </div>  \r\n         </div>\r\n           \r\n  );\r\n};\r\n\r\n\r\n\r\nexport default Dialogs;","import React from \"react\";\r\nimport { sendMessageCreator } from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport { connect } from \"react-redux\";\r\nimport { withAuthRedirect } from \"../../HOC/withAuthRedirect\";\r\nimport { compose } from \"redux\";\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    dialogsPage: state.dialogsPage,\r\n  }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    sendMessage: (newMessageBody) => {\r\n      dispatch(sendMessageCreator(newMessageBody));\r\n    }\r\n  }\r\n}\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, mapDispatchToProps),\r\n  withAuthRedirect\r\n)(Dialogs);"],"names":["props","path","id","_jsx","className","s","dialog","active","children","NavLink","to","name","message","AddMessageForm","_jsxs","onSubmit","handleSubmit","messageBlock","Field","textarea","placeholder","component","button","type","state","dialogsPage","dialogsElements","dialogs","map","d","DialogItem","messagesElements","messages","m","Message","isAuth","dialogsItems","Formik","initialValues","newMessageBody","formData","_ref","resetForm","console","log","sendMessage","addNewMessage","form","formikProps","_objectSpread","Navigate","compose","connect","dispatch","sendMessageCreator","withAuthRedirect","Dialogs"],"sourceRoot":""}